package net.sahet.autovalue.demo;

import com.google.auto.value.AutoValue;

/**
 * AutoValue With Builders The initial example we have looked at covers the
 * basic usage of AutoValue using a static factory method as our public creation
 * API.
 * 
 * Notice that if all our fields were Strings, it would be easy to interchange
 * them as we passed them to the static factory method, like placing the amount
 * in the place of currency and vice versa.
 * 
 * This is especially likely to happen if we have many fields and all are of
 * String type. This problem is made worse by the fact that with AutoValue, all
 * fields are initialized through the constructor.
 * 
 * To solve this problem we should use the builder pattern. Fortunately. this
 * can be generated by AutoValue.
 * 
 * Our AutoValue class does not really change much, except that the static
 * factory method is replaced by a builder:
 *
 * 
 * 
 */
@AutoValue
public abstract class AutoValueMoneyWithBuilder {
	public abstract String getCurrency();

	public abstract long getAmount();

	public static Builder builder() {
		return new AutoValue_AutoValueMoneyWithBuilder.Builder();
	}

	@AutoValue.Builder
	public abstract static class Builder {
		public abstract Builder setCurrency(String currency);

		public  abstract Builder setAmount(long amount);

		public  abstract AutoValueMoneyWithBuilder build();
	}
}
